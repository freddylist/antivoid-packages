#!/bin/bash

# Canonicalize distdir for ancestor check
XBPS_DISTDIR="$(readlink -f "$(xdistdir)")" || exit 1

function usage() {
	echo >&2 'Usage: xupdate [-f] [-H <hostdir>] <template>'
	exit 1
}

while getopts fhH: opt; do
	case "$opt" in
		f) flag_f="-f" ;;
		H) flag_H="-H $OPTARG" ;;
		h|?) usage ;;
	esac
done
shift $(( OPTIND - 1 ))

if [[ -f "$1" ]]; then
	template="$1"
elif [[ -f "$1/template" ]]; then
	template="$1/template"
elif [[ -f "${XBPS_DISTDIR}/srcpkgs/$1/template" ]]; then
	template="${XBPS_DISTDIR}/srcpkgs/$1/template"
else
	usage
fi

template="$(readlink -f "$template")"

# shellcheck source=template
source "${template}"

# Set error *after* sourcing template as sourcing the template can give errors
set -e

# Template not already in distdir?
if [[ -z "$(find "${XBPS_DISTDIR}/srcpkgs" -samefile "$template" -print -quit)" ]]; then
	# Copy template to distdir for fetching
	pkgdir="${template%/*}"
	pkg="${pkgdir##*/}"
	xbps_pkgdir="${XBPS_DISTDIR}/srcpkgs/${pkg}"
	mkdir -p "$xbps_pkgdir"
	cp "$template" "$xbps_pkgdir"
	[[ -f "${pkgdir}/update" ]] && cp "${pkgdir}/update" "$xbps_pkgdir"
	template="$xbps_pkgdir/template"
fi

function finish() {
	[[ -z "$pkgdir" ]] && return

	cp "$template" "$pkgdir"
}

trap 'finish' EXIT

function msg() {
	printf >&2 '%s: %s\n' "${0##*/}" "$@"
}

# Update hashes for *-git packages
function update_hash() {
	local remote latest today
	# Remote url is likely the first 4 or so components of the URL
	remote="$(echo "${distfiles}" | cut -d/ -f1,2,3,4,5)"
	latest="$(git ls-remote "$remote" | grep '\sHEAD$' | cut -f1)"

	[[ "$latest" = "$_commit" ]] && return

	today="$(date -u +%Y%m%d)"

	sed -i \
		-e "s/^revision=.*/revision=1/" \
		-e "s/^version=.*/version=${today}/" \
		-e "s/^_commit=.*/_commit=${latest}/" "${template}"

	echo "${today}"
}

function update_version() {
	local latest_version

	latest_version="$("${XBPS_DISTDIR}/xbps-src" $flag_H update-check "${pkgname}" \
		| grep -e '->' \
		| tail -n1 \
		| sed -e 's/.*-\(.*\)/\1/')"

	[[ -z "${latest_version}" ]] && return

	sed -i \
		-e "s/^revision=.*/revision=1/" \
		-e "s/^version=.*/version=${latest_version}/" "${template}"

	echo "${latest_version}"
}

msg "Checking for ${pkgname} updates..."
new_version="$(case "${pkgname}" in
	*-git) update_hash ;;
	*) update_version ;;
esac)"

if [[ -z "${new_version}" ]]; then
	msg "No ${pkgname} updates."
	[[ -z "${flag_f}" ]] && exit 0
fi

msg "Generating checksum in '${template}'..."
xgensum -i $flag_f $flag_H "${template}" 1>&2

[[ -z "${new_version}" ]] && exit 0

msg "New version:"
echo "${new_version}"
